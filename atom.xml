<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Blog of Ditsing]]></title>
  <link href="http://www.ditsing.com/atom.xml" rel="self"/>
  <link href="http://www.ditsing.com/"/>
  <updated>2015-10-14T07:51:56+11:00</updated>
  <id>http://www.ditsing.com/</id>
  <author>
    <name><![CDATA[ditsing]]></name>
    <email><![CDATA[ditsing@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[面试投行]]></title>
    <link href="http://www.ditsing.com/blog/2015/10/15/mian-shi-tou-hang/"/>
    <updated>2015-10-15T09:27:47+11:00</updated>
    <id>http://www.ditsing.com/blog/2015/10/15/mian-shi-tou-hang</id>
    <content type="html"><![CDATA[<p>从今年年初我就一直在留意 Google 之外的工作机会。倒不是因为我不喜欢在 Google 工作，而是因为人有时候会幻想，幻想自己跳个槽就能升职加薪走上人生巅峰；有时候也会好奇自己现在在市场上还值多少钱。恰好我经常会收到 LinkedIn 私信，问我有没有兴趣换工作。有些邀请根本就是群发的，跟我的经历一点关系都没有；也有那么几个来自有潜力的创业公司，比如某个做发裸照的应用的公司。今年七月份的时候我收到一封私信，声称他们在帮一个跨国 “Prop Firm” 招 “technical” 人才。我花了很久才 Google 到 Prop Firm 是投资银行的简称。以前经常在某乎上看到投行的实习生晒工资，我突然感到很有兴趣，升职加薪的欲望在心里蠢蠢欲动。</p>

<!-- more -->


<p>于是我就以热情的语气回了邮件，并号称希望换工作的理由是 “believe I can do something more”。很快猎头就给我打过来了电话，介绍了一下这个跨国公司和要招聘的岗位。我问期望薪水有多高，我想要 160K 一年行不行。猎头打哈哈说当然有可能了，更给力的是投行倾向于发现金而非股票，然后话锋一转，不过我们还是先面试吧。当然根据惯例猎头还问我对新工作的期望，工作地点啊什么时候可以开始上班啊，还透露出比较倾向于招人去世界中心美国。事后猎头要了我的简历并说明要向雇主汇报情况，交换意见。</p>

<p>看了我的简历之后，猎头发来了非常详细的职位介绍和笔试的链接。笔试包括一套类似性格测试的题目，一套语言测试和一套在线编程题。心理测试的题目都类似于“如果你发现同事做错了，在多大程度上你会立即向他指出？”。闭着眼睛都能猜出来回答和测试结果的联系。英语题目还是有点挑战的，好多好多单词不认识。编程题目对做过 ACM 的同学们来说很小儿科。五道题分别是：霍夫曼编码，筛法求素数，树的遍历，存储在一维数组中的单链表求环并要求 <code>O(1)</code> 的额外空间，以及最后一道题最长公共子序列。测试时长三小时，我花了一个小时二十分钟做完（大家不要嘲笑我）。语言我选了 Ruby，纯粹是为了炫技。</p>

<p>接下来我就被转交给了投行的 HR，定下了现场面的日期。HR 在面试确认信里告诉我，着装可以是 “what ever you prefer, business casual or suit”。我被吓到了，当天穿了我唯一一身衬衣西服去了出发去了面试地点——当然是挤公交去的，哪里打得起车。投行坐落在市中心最高端的办公楼区域，周围都是赫赫有名的大牌投行。坐电梯到了高层的 Reception，前台很热情又很客套地跟我聊天。可惜我英语不太灵光没能搭上几句话。过了一会儿负责我的 HR 告诉我面试官马上就到。每个人都穿得相当正式，举止得体，言语彬彬有礼。只有我扭扭捏捏地坐着因为身上的西服实在不舒服。二十分钟之后一个穿着 hoodie 短裤拖鞋的大哥出现在我面前，告诉我他就是面试官。</p>

<p>于是我们在一种很奇怪的气氛中开始了面试。题目不难，实现一个模拟 <a href="https://en.wikipedia.org/wiki/Conway's_Game_of_Life" title="Game of Life">Game of Life</a> 的小程序，每秒刷新一次状态。要求和前端的图形界面衔接好，编译出程序，最后还要记得用 Git 把源代码 commit 好。我和面试官花了若干分钟在配置 IDE 上，可惜没有配置成功。我只好选择了没有配置过的 VIM。更作死的是我选了 C++，把绝大部分面试的时间花在了回忆如何申请内存，如何初始化二维 vector，如何传递 vector 给函数，虚函数重载上。过程中我还问 <code>override</code> 关键字应该放在什么地方，彻底暴露了我对 C++11 的不熟悉。我抓耳挠腮的整个过程中面试官没有提供任何帮助，所以我猜他也没什么面试经验（此处一定会被吐槽）。中间一个 shadow interviewer 走了进来， 似乎是个 CTO。我一边疯狂地往我的代码里加调试用的 <code>printf</code>一边听了他的自我介绍，还跟他扯了两句。不知道为什么我还留意到 CTO 同志穿着也很随意，于是更囧了。四十五分钟面试时间到，我的代码已经有一半都是 <code>printf</code> 了，模拟出来的 Game of Life 还是不动的。面试官无奈地要求我把已有代码 commit 上去，还问我对 C++11 知道多少。我只好回答“仅仅试过”了。</p>

<p>面试后我被客客气气地送了出去，然后就冒着小雨回家了。又过了几周我收到猎头邮件，都是“很遗憾”之类的话。我的投行面试就到此为止了。</p>

<p>最后总结经验教训：</p>

<ol>
<li>英语要学好；</li>
<li>不要穿西服面技术岗位；</li>
<li>选最熟悉的编程语言；</li>
<li>面试中遇到困难时要适时寻求帮助。</li>
</ol>


<p>P.S. 这次面试之后我越发觉得偶尔尝试面试其他公司很有意思。后来断断续续又回复了某图书公司、某收据创业公司和某运动腕带公司的招聘邮件。可惜这些尝试都中途夭折掉了，没有走到面试的阶段。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[记一个工作中遇到的问题]]></title>
    <link href="http://www.ditsing.com/blog/2014/09/23/ji-yi-ge-gong-zuo-zhong-yu-dao-de-wen-ti/"/>
    <updated>2014-09-23T21:30:47+10:00</updated>
    <id>http://www.ditsing.com/blog/2014/09/23/ji-yi-ge-gong-zuo-zhong-yu-dao-de-wen-ti</id>
    <content type="html"><![CDATA[<p>一年没有写博客了，写一个我今年在工作中遇到的问题吧。</p>

<blockquote><p>首先有一个字符串集合<code>A</code>（母串集），<code>A</code>中大概有1.6x10<sup>10</sup>个字符串。这些字符串大部分都比较短，长度小于100。最长的字符串有2<sup>16</sup>个字符。</p>

<p>还有一个比较小的字符串集合<code>B</code>（子串集）。<code>B</code>里的每个字符串都是<code>A</code>里某个字符串的前缀，共有2.4x10<sup>7</sup>个前缀。<code>B</code>中的每个字符串都与一个非负整数相关联。</p>

<p>现在对于<code>A</code>中的每个字符串<code>a_i</code>，求一个整数。这个整数等于<code>B</code>中所有<code>a_i</code>的前缀所对应的整数的最大值。</p></blockquote>

<p>（之前已经听我白话过这个问题的同学们：是的，问题规模又扩大了。）</p>

<p>背景：<code>A</code>是数据的key集合，<code>B</code>是用户的删除数据请求，删除被匹配的key和它对应的数据。因此，最后<code>A</code>中被匹配到的字符串不会特别多，大约是<code>B</code>的大小的若干倍。可以认为远小于100倍。</p>

<!--more-->


<p>看到这个问题的规模，我们就知道只能跑在一台机器上的算法是不行的。必须设计一个能并行地跑在许多台机器上的算法。</p>

<p>这个问题的规模如果小一点，就相当容易解决。例如，如果<code>B</code>中的字符串少一点，少到2.4x10<sup>4</sup>个。我们就可以把<code>B</code>做成一个Trie直接扔到内存里。准备若干台机器，每台机器都复制一份。给每台机器分配<code>A</code>的一段，各自扫描就好了。这样的复杂度是<code>length(sigma A + sigma B)</code>的。可能会比较占内存，但是现在内存都是白菜价了， who cares。</p>

<p>如果<code>B</code>再大一点点，大到2.4x10<sup>6</sup>，问题也不是那么难。我们可以：</p>

<ol>
<li>把<code>B</code>分成一百份，每次用上述方法处理一份，处理一百次；</li>
<li>或者，找一份可以放在硬盘上的Trie实现（假设能找得到）。Trie的每次查询只用到整个Trie的很小一部分。实现时只需要把查询时能访问到的部分装载到内存里，访问不到的swap到硬盘上就可以了。如果性能不足，还可以把4个byte压缩成一个long，既减少硬盘读写又减少空间浪费。</li>
<li>再或者两种方案结合，把<code>B</code>分成10份，每次用硬盘Trie处理一份。即使用最烂的（我的）实现，Trie文件的大小也不过几十G，可以接受。</li>
</ol>


<p>但是拆分<code>B</code>的方案不能把<code>B</code>拆成太多份。因为每拆一份<code>B</code>都要把<code>A</code>复制一份，也就意味着多一份的数据读写。不幸的是我司的storage层对许多个并行读者的支持并不好，过多读者会导致大家都读得更慢。<code>B</code>如果再大，拆分的方法就不好用了。</p>

<p>大家有什么想法？我的答案在下面，不要偷看哦。</p>

<br/>


<br/>


<br/>


<hr />

<center>答案分割线</center>


<hr />

<br/>


<br/>


<br/>


<br/>


<p>解决方案其实很简单，相信大家也都想到了：hash。</p>

<p>对集合<code>B</code>里的每一个子串，hash它长度为2的整数次幂的<strong>最长前缀</strong>。如果一个串的长度为19，就hash前16个字符；如果长度是32，就hash所有字符。这样我们得到了2.4x10<sup>7</sup>个long，大约占192M内存（我是不是算错了&hellip;.对这个数字没什么信心）。</p>

<p>把这些hash值扔到一个数组<code>b_hash_set</code>里，排序之。</p>

<p>对于集合<code>A</code>里的每个母串，hash它的<strong>每个</strong>长度为2的整数次幂的<strong>前缀</strong>。对于每个字符串<code>a_i</code>，我们会得到<code>log(length(a_i))</code>个数字。称这些hash值的集合为<code>a_hash_set</code>。
如果<code>a_hash_set</code>和<code>b_hash_set</code>中的某一对数字<code>a_hash</code>和<code>b_hash</code>相等，他们分别对应的母串和子串才<strong>有可能</strong>前缀匹配。就不证明了，结论非常明显。</p>

<p>这时再暴力匹配有可能的字符串对，运行时间就完全可以接受了。</p>

<p>一个小优化：在生成<code>a_hash_set</code>的一个值的时候，可以直接在<code>b_hash_set</code>里二分查找这个值。如果不存在，就不用把它放到<code>a_hash_set</code>里了。这样可以显著减小<code>a_hash_set</code>（以及和它关联的数据）的体积。在实践中，优化后<code>a_hash_set</code>的体积缩小了三百倍。</p>

<p>如何找到所有相等的<code>a_hash</code>和<code>b_hash</code>对？把它们扔到一起sort就可以了。<code>a_hash_set</code>的体积可能会特别大，但是我们也有分布式排序算法嘛。</p>

<h3>后话</h3>

<p>上次在群里跟大家讨论的时候，范神@ronaflx提到，他们判断整个字符串相等的时候都会先算hash，然后暴力匹配。我当时还觉得，暴力就暴力吧，hash能有什么作用？仔细一想，使用hash，子串和母串都只需要扫描一遍；而且hash本身的体积比字符串小很多，比较容易传递。在这里顺便感谢范神给我普及字符串匹配基础知识。</p>

<p>但是hash只能判断相等（严格来说，只能确定不等），不能判断前缀。一个常见的workaround是把母串的所有前缀都hash了，再和子串的hash比。这样的方案在母串都不长的情况下很适用。但是在这个问题上，这样做会在时间复杂度上乘一个一百左右的常数。要减小常数，只处理2的整数次幂也是常见workaround：牺牲部分精度（子串的一部分被忽略了），但是可以把常数从100减少到6。</p>

<p>最后，欢迎大家提出更好的方法来打脸！</p>

<h3>吐槽</h3>

<p>Java的TreeSet存2.4x10<sup>7</sup>个数，居然要占用10多G内存！你丫是暴力数组实现的Trie吧！</p>

<p>下次给自己的service设计功能的时候，一定要先想想到底能不能高效实现。堂堂大Google，若干M个请求都处理不好，混不混了！</p>

<h3>感慨</h3>

<p>本文就是我今年工作最大的成绩了。进入Google一年，蹉跎一年，一事无成，Todo List 基本没有刷，能力进步为零。</p>

<p>逆水行舟，不进则退。与君共勉！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compiler学后]]></title>
    <link href="http://www.ditsing.com/blog/2013/11/17/compilerxue-hou/"/>
    <updated>2013-11-17T22:40:00+11:00</updated>
    <id>http://www.ditsing.com/blog/2013/11/17/compilerxue-hou</id>
    <content type="html"><![CDATA[<p>从我高三听说“公开课”开始，我就觉得这个东西一定会有前途。那时候他们还叫Open Course Wave，公开课的形式还都是课程笔记和清晰度超低的课堂视频。当时我看完了流行的《哲学：死亡》和《聆听音乐》，哈佛的《公正》和《幸福》都只看了一点点。另外还囤下了
好几套课程，一直拖到现在都没有接着看。可惜当时没有抓紧时间上《Algorithm》和C语言的课程，要不然上大学的时候也不会那么智商捉急了。</p>

<p>课程名两边用什么标点符号都觉得不对劲，我就用书名号了。</p>

<p>回到正题。大三上编译原理的时候我一直都在忙其他事情——ACM，GRE，莫名其妙的项目，实习，以及无聊的单机版Dota。跟随机房里诸位大牛的脚步，我开始了《Compiler》课程的学习。当时觉得自己自制力不行，没敢跟着老师的脚步上，而是选择了自助模式。看视频做作业，学习过程断断续续，前后持续了近一年。</p>

<p>课程设置非常不错，课堂上讲解的内容也比较简单，基本被我们大HIT课程覆盖。虽然我大HIT讲的我基本没听懂——也有可能是我总在上课的时候睡觉。视频讲得比较浅，但是很详细，有许多step-by-step的例子，例如模拟自动机和算法的运行等等。我之前一直对我们教材龙书的难度深表不满：许多涉及实现细节的代码和算法，跟原理混在一起，真的很难懂很难懂。我也不知道该怎么讲才能讲简单讲清楚。但是我想Alex Aiken教授的这门《Compiler》真的做到了易懂：整个编译器地框架和结构讲得非常清晰，具体算法和原理也都有介绍。教授涉猎很多，跟着教授上课不会担心他漏掉什么东西没有讲。编译器的实现主要体现在作业里，需要自己下一番功夫才能做好。小课堂大作业，我最喜欢的模式。所以我这篇博客会一直说作业怎么样怎么样怎么样。</p>

<!--more-->


<p>下面就来了。</p>

<p>整个课程的作业加在一起就是设计一个编译器。它首先提供了一个完整版的编译器作为标准。这个编译器的框架搭得好，比较容易扩展；模块化也做得非常好，编译的每个步骤对应一个模块，模块之间接口简单明确，依赖很轻。这样一来一个模块可以单独拆出来交给学生实现，其他模块都用标准版的，易于调试和查错。框架屏蔽了许多细节，在前两个作业中基本不需要关心底层实现。唯一的缺点是框架提供的utility不太好用，需要自己实现正序的单链表。在编译的时候保持方法和成员的顺序是一个非常好的特性，所以我们需要不改变顺序的单链表。</p>

<p>作业中编译器的源语言是Cool语言。Cool是一种完美的教学语言。没有指针没有数组，一切都是对象，有继承和多态，多了很多十分有意思的细节；自创了type-case语句，非常有用而且实现非常有趣的语句。编译器的目标语言是MIPS汇编，比X86概念更少更容易入门。</p>

<h2>四次作业的感受</h2>

<p>可以毫不夸张地说，作业是这门课程里最实用最有价值的部分。我的绝大部分时间都花在了作业上，而且我觉得这个时间花得十分值得。</p>

<p>PA2词法分析。总体来说比较简单。部分原因是，与后来的三个作业相比，这个作业要解决的问题本身比较简单。作业使用的工具flex对这个问题做了非常好的抽象，我们只需要用正则表达式描述识别token的规则就行了。当然，并不是所有编程语言的语法规则都可以用正则语言来描述（貌似大部分都不能用正则语言完整描述）。比如Cool语言允许嵌套注释，在处理的过程中就必须记录一下当前注释嵌套的层数，才能正确配对注释开始和结束。这个作业的用意不在于考量大家使用正则表达式的能力，所以Cool的语法有很多明显的简化，避开了大部分难点。时间太久了难点都记不得了，在这里就不列出了。做这个作业的时候可以试图简单扩展一下作业里规定的Cool的语法，相当有意思。</p>

<p>PA3语法分析。相对于PA2的简单直白，PA3就相当抽象了。PA3用到的工具是Bison，比flex复杂了很多。阅读Bison的说明书花了我三四天的时间（根据G+ Post的记录）。加上课程提供的各种基础库（AST等等）是从这次作业开始引入的，使得这次作业的阅读量和理解量非常大。作业本身的难度一般，完成一个上下文无关文法，规定操作符的结合性等等。我当时的时间主要花费在处理／抽象各种空和非空的列表上了。其实只要文档读得细，应该很顺利就能做完并且拿到满分——我的意思是在打分器的帮助下。我试图阅读Bison编译出来的C语言程序，失败了；有时间要了解下Bison的算法。</p>

<p>这里必须表扬一下Compiler课程各个作业中的打分脚本。本质上就是集合了无数test case的一个库，颇有Online Judge风格。要把这个库里的每一个case都处理好是非常不容易的。在这四个作业中，我第一次提交的版本基本都在十分以下——满分是50-80。但是经过无数次的修改和刷分，最后拿到满分也不是特别困难。
我觉得这种做法是对批作业模式的一种改进。尤其是在作业十分复杂的情况下，助教基本不可能理解每个学生的代码，注意到作业里的每个细节，也就没办法高效地评分。这个脚本对学生也特别有用。它大大缩短了学生得到作业反馈的时间，对自学帮助很大。这个方法和助教答疑结合使用，应该会有非常好的效果。当然这一切都建立在一个前提上：评分脚本一定要做得非常用心，包含足够多的case使得它不容易被针对。</p>

<p>PA4语义分析。这是整个作业里最难的部分。我花了整整十四天，每天从早到晚都在研究这个问题。很庆幸毕设选了个有把握的题目，这样才有时间专心做这些。PA4整体设计很重要。我是先实现了一个类的继承关系树，每个class都是这棵树的一个结点。建树的时候顺便完成了继承关系的检查，确保每个类都有父亲。树中允许某些类没有定义，将报错推迟到类型检查的部分，这样更加user-friendly。然后再遍历一遍收集结点深度和方法的信息。接着检查每个方法，成员和表达式。我第一次实现的类型检查非常严格，对错误几乎是零容忍。后来为了容错，推断了很多表达式的类型（例如加减法，一定是整数），检查到错误只报错而不退出，继续类型检查。因为我听说“遇到第一个错误就退出的编译器不是好编译器”。（因为不这么干拿不了满分。）</p>

<p>在检查类型的时候我遇到了SELF_TYPE和找到两个树结点的最近公共祖先两个问题。因为代码里已经有了很多trick和workaround，所以我不得不在class树结点外又包了一层Type类，专门用于处理这两个问题；又定义了Type和树结点的隐式转换，让以前的代码能继续使用。这样改来该去改得自己都晕了，最后终于过了所有的case。</p>

<p>在这个作业里，表（Table）是个非常重要的基础设施。从类名查询Type，查询方法和成员在不在某个类中，收集某个类的所有方法，都要用到表。我比较倾向于变量和类名要单独建表，实现会比较方便。但是整个框架应该是倾向于把所有标示符(identifier)都放在一个表里的。作业的框架提供了ScopeTable来解决这个问题。</p>

<p>还有一个问题是如何存储类的方法和成员的表。子类会继承父类的所有方法和成员，我们要不要在子类的方法表里再存储一遍父类的方法／成员呢？很直白的空间－时间的取舍。框架提供的ScopeTable非常好地解决了这个问题。ScopeTable被设计成一个可以包含另外一个ScopeTable作子表的表。对外层Table的修改不会影响内层的Table。虽然ScopeTable其实是用链表实现的，但是我相信肯定会有更高效的数据结构来解决这个问题。</p>

<p>PA5代码生成。在视频里介绍了有一个寄存器和一个栈来做计算的机器（<del>忘了名字叫什么了</del>不就是下推自动机么！）。这种机器比较容易用汇编语言实现，而且我们都知道功能跟图灵机是一样的。这次作业涉及到了许多新问题，例如寄存器分配和临时变量的分配。不会高级算法的（比如我）只好用直白的低效的算法来实现了。我在这个作业中使用了做HIT的编译原理课程设计的思路，即约定每个表达式都把返回值放在a0（或者某个其他寄存器）里，其他寄存器都当做临时变量来用，尽量不使用栈。当时我的课程设计确实没有做出来，因为我当时使用了一种非常复杂的方法实现了用栈保存结果，而且也没有把这种做法推广到所有计算上。</p>

<h2>遗憾和吐槽</h2>

<p>课程学完了还是有些许遗憾的。PA2里不清楚生成自动机的细节。PA3里没有实现报错的时候附加行号，而且一直也没有弄明白行号到底是怎么工作的。PA4设计有点冗余，多加了一个类；细节处理十分混乱；最近公共祖先用的是记下结点深度然后向上遍历的方法实现的。PA5没有实现GC，代码生成中有许多hack；依赖于栈，没有分配寄存器算法。以后有时间要完善一下，做一份标准答案出来。</p>

<p>对作业的不满也有一些。在抽象语法树（AST）中，attr和method基于一个共同的基类，给类型检查和代码生成造成了很多麻烦。我必须实现一个虚函数来判断一个结点是方法还是成员。但是我也没有想出更好的方法来实现AST，所以这只是个吐槽。
ScopeTable很强大但是也很弱。整个表只能查但是不能遍历，这让我非常不爽。因为代码生成很显然需要遍历所有的方法和成员，所以我必须在存储ScopeTable的同时自己实现一个链表存储所有的成员。同样的冗余发生在PA4和PA5中间，PA4中收集过的许多信息PA5要再收集一遍，代码重复而且效率低。</p>

<p>最后，作业框架不支持添加自己的源文件，导致我的单个源文件超过了2000行，各种代码堆在一起很难阅读。</p>

<p>要不要把这些吐槽总结一下，发给教授作为Feedback？</p>

<h2>总结</h2>

<p>作业虽然做完了但是很多概念都忘掉了。如果有时间，我还会努力完成完成剩下的Quiz和Assignment。</p>

<p>这门课程的一个“副作用”是改变了我对Java的看法。曾经我觉得Java是一门又慢又慢又慢的语言。但是从编译器的角度来看，Java还是很优秀的。它实现了好多C/CPP没有实现的高级特性，例如Reflection和运行时加载类。这<del>给了我继续用Java干活的勇气</del>让我在使用Java的时候感觉好了不少。另外我还听说经过仔细<del>调教</del>调校的Java虚拟机可以让Java代码的效率达到CPP的98%左右。我着实被震惊了。以后再也不黑Java了。</p>

<p>《Compiler》也给我了一个（自我感觉）非常好的入门指引，如果要进一步在这个领域里学习，我会重点关注以下几个方面：寄存器分配，临时变量分配，生成自动机语法，语法分析的算法，代码优化算法以及其他高级语言语法的实现。</p>

<p>写到这里，我再一次深深地感觉到了人和人的不同。我想要继续学习就只好自己去查书，寻求帮助和指导对我来说异常困难。大学里的研究生们同学呢？本以为公开课会给我们这些没考上大学的人一个逆袭的机会，现在才意识到，要逆袭，这才仅仅是一个开始。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一发智力小问题]]></title>
    <link href="http://www.ditsing.com/blog/2013/10/26/yi-fa-zhi-li-xiao-wen-ti/"/>
    <updated>2013-10-26T09:48:00+11:00</updated>
    <id>http://www.ditsing.com/blog/2013/10/26/yi-fa-zhi-li-xiao-wen-ti</id>
    <content type="html"><![CDATA[<p>前几天从同事那里听到了一个面试的小智力题，来给大家分享一下</p>

<blockquote><p>有一张方形的桌子，桌子四角放了四枚一模一样的硬币。在每一轮操作中，玩家可以任意反转这些硬币。一轮操作之后，桌子会被水平旋转90度的倍数，但是玩家并不知道它被转了多少度。某一轮操作之后所有硬币都是正面或者都是反面朝上，则玩家获胜，游戏结束。
求一个必胜策略。</p></blockquote>

<p>提问者（一个印度人）说这个问题是面试题，大家五分钟之内就能想出来答案。我只能表示智商需要充值了。</p>

<!-- more -->


<hr />

<center>最喜欢分割线了</center>


<hr />

<br/>


<p>看到这个问题，我第一个反映是非常naive的“真的有必胜策略吗？好神奇的样子。”仔细考虑之，每次操作之后桌子都会被随机旋转，所以
必胜策略肯定不能基于硬币的绝对位置——我们没有参照物。于是循环移动后相等的序列应该被认为是同一个序列。这样4个硬币的排列只能有三种不同的序列：</p>

<ul>
<li>ABAB</li>
<li>AABB（和ABBA）</li>
<li>AAAB（和AABA，ABAA，BAAA）</li>
</ul>


<p>其中A代表正面，B代表反面。当然我排除了AAAA的初始情况。</p>

<p>观察一下，第一个序列最有意思，翻转0号位和2号位一定可以让这个序列变成AAAA。第二个和第三个序列经过翻转0，2号位之后变成了：</p>

<ul>
<li>BAAB（和BBAA）</li>
<li>BABB（和BAAA，BBBA，AABA）</li>
</ul>


<p>还是在他们原来的类别中。非常不错的性质。</p>

<p>接下来处理第二类的BBAA，粗暴地翻转0号位和1号位，得到结果</p>

<ul>
<li>ABAB（和AAAA）</li>
<li>ABBB（和ABAA，AABA，BBBA）</li>
</ul>


<p>第二类的一半变成了获胜的局面，游戏结束；另外一半变成了第一类。第三类依旧还是第三类。</p>

<p>说到这里，第三步就很明显了，翻转0号和2号位，使得第二类全部变成获胜局面。
第一步中已经说明翻转0号和2号位之后第三类还是第三类。接下来专心处理第三类。</p>

<p>第四步策略也很简单，直接翻转0号位。翻转之后的情况是</p>

<ul>
<li>BBBB（和BBAA，BABA，ABBA）</li>
</ul>


<p>变成了获胜、第一类和第二类。于是重复步骤1－3完成游戏。</p>

<p>好久不写题了，贴个代码验证一下想法吧（自己爽一下吧）。希望我能早日回归，做上Topcoder。</p>

<figure class='code'><figcaption><span>Code for Verification  (game_verify.cpp)</span> <a href='http://www.ditsing.com/downloads/code/game_verify.cpp'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  main.cpp</span>
</span><span class='line'><span class="c1">//  TryXcode</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  Created by ditsing on 10/19/13.</span>
</span><span class='line'><span class="c1">//  Copyright (c) 2013 ditsing. All rights reserved.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">STEPS_L</span> <span class="o">=</span> <span class="mi">7</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">steps</span><span class="p">[</span><span class="n">STEPS_L</span><span class="p">][</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">{</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">coins</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span> <span class="n">table</span><span class="p">[</span><span class="n">STEPS_L</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="mi">4</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span> <span class="n">tmp_table</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span> <span class="n">rotat</span><span class="p">[</span><span class="n">STEPS_L</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">fail_count</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="n">check_win</span><span class="p">(</span> <span class="kt">int</span> <span class="n">coins</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">coins</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">coins</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">coins</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">coins</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>    <span class="n">coins</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="n">coins</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">search_coins</span><span class="p">(</span> <span class="kt">int</span> <span class="n">step</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">step</span> <span class="o">==</span> <span class="n">STEPS_L</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Fails on Initial situation of %d %d %d %d.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="n">coins</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">coins</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">coins</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">coins</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Ends up with %d %d %d %d.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="n">table</span><span class="p">[</span><span class="n">step</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="n">table</span><span class="p">[</span><span class="n">step</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span> <span class="n">table</span><span class="p">[</span><span class="n">step</span><span class="p">][</span><span class="mi">2</span><span class="p">],</span> <span class="n">table</span><span class="p">[</span><span class="n">step</span><span class="p">][</span><span class="mi">3</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;With rotation as %d %d %d %d %d %d.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="n">rotat</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">rotat</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">rotat</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">rotat</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span>
</span><span class='line'>               <span class="n">rotat</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span> <span class="n">rotat</span><span class="p">[</span><span class="mi">5</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span> <span class="kt">int</span> <span class="n">i</span><span class="p">(</span> <span class="mi">0</span><span class="p">);</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">table</span><span class="p">[</span><span class="n">step</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">table</span><span class="p">[</span><span class="n">step</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">^</span> <span class="n">steps</span><span class="p">[</span><span class="n">step</span><span class="p">][</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">check_win</span><span class="p">(</span> <span class="n">table</span><span class="p">[</span><span class="n">step</span><span class="o">+</span><span class="mi">1</span><span class="p">]))</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Wins on Initial situation of %d %d %d %d.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="n">coins</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">coins</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">coins</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">coins</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Ended up with %d %d %d %d at step %d.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="n">table</span><span class="p">[</span><span class="n">step</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="n">table</span><span class="p">[</span><span class="n">step</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span> <span class="n">table</span><span class="p">[</span><span class="n">step</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="mi">2</span><span class="p">],</span> <span class="n">table</span><span class="p">[</span><span class="n">step</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="mi">3</span><span class="p">],</span>
</span><span class='line'>               <span class="n">step</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;With rotation as %d %d %d %d %d %d %d.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="n">rotat</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">rotat</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">rotat</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">rotat</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span>
</span><span class='line'>               <span class="n">rotat</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span> <span class="n">rotat</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span> <span class="n">rotat</span><span class="p">[</span><span class="mi">6</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">fail_count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span> <span class="kt">int</span> <span class="n">ro</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">ro</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">;</span> <span class="n">ro</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">rotat</span><span class="p">[</span><span class="n">step</span><span class="p">]</span> <span class="o">=</span> <span class="n">ro</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span> <span class="kt">int</span> <span class="n">i</span><span class="p">(</span> <span class="mi">0</span><span class="p">);</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">tmp_table</span><span class="p">[(</span><span class="n">i</span><span class="o">+</span><span class="n">ro</span><span class="p">)</span><span class="o">&amp;</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">table</span><span class="p">[</span><span class="n">step</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">memcpy</span><span class="p">(</span> <span class="n">table</span><span class="p">[</span><span class="n">step</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span> <span class="n">tmp_table</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span> <span class="n">tmp_table</span><span class="p">));</span>
</span><span class='line'>        <span class="n">fail_count</span> <span class="o">+=</span> <span class="n">search_coins</span><span class="p">(</span> <span class="n">step</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">rotat</span><span class="p">[</span><span class="n">step</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">fail_count</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">fail_count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span> <span class="n">coins</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">coins</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">;</span> <span class="n">coins</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span> <span class="n">coins</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">coins</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">;</span> <span class="n">coins</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span> <span class="n">coins</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">coins</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">;</span> <span class="n">coins</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">for</span> <span class="p">(</span> <span class="n">coins</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">coins</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">;</span> <span class="n">coins</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="n">memcpy</span><span class="p">(</span> <span class="n">table</span><span class="p">,</span> <span class="n">coins</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span> <span class="n">coins</span><span class="p">));</span>
</span><span class='line'>                    <span class="n">memset</span><span class="p">(</span> <span class="n">rotat</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span> <span class="n">rotat</span><span class="p">));</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">check_win</span><span class="p">(</span> <span class="n">coins</span><span class="p">))</span>
</span><span class='line'>                    <span class="p">{</span>
</span><span class='line'>                        <span class="n">fail_count</span> <span class="o">+=</span> <span class="n">search_coins</span><span class="p">(</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Fails on %d cases.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">fail_count</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[博客重新开张啦]]></title>
    <link href="http://www.ditsing.com/blog/2013/10/22/bo-ke-zhong-xin-kai-zhang-la/"/>
    <updated>2013-10-22T23:31:00+11:00</updated>
    <id>http://www.ditsing.com/blog/2013/10/22/bo-ke-zhong-xin-kai-zhang-la</id>
    <content type="html"><![CDATA[<p>从FB回来之后再没写过博客。原因很多，一个是因为忙，另外一个是因为&hellip;心灰意冷专心学术思考人生去了。</p>

<p>那我为什么突然抽风要回来写日志了呢？</p>

<ul>
<li>第一，当然是因为在悉尼的生活稳定下来了。</li>
<li>第二，经过努力终于修复了博客的评论数量，现在主页上的评论统计是正确的了。</li>
<li>第三纯粹是个意外，我突然发现一年前的今天我搞了一个<a href="http://www.ditsing.com/todo-list/" title="Todo List">Todo list</a>。这个list上除了第一条之外我居然都完成了。这点让我非常开心。</li>
</ul>


<p>综上所述，心情好了就会来写博客了。</p>

<p>我还是有一个写作计划的。
<a href="https://class.coursera.org/compilers-selfservice/class" title="Compilers">Coursera上的Compiler</a>课程基本上学完了，要写心得体会；XFSd做完了也有很多话想说。把计划公布了就更有压力，希望我不会拖得太久。</p>

<p>好吧，按照惯例，我来回忆一下一年的生活。各位看官可以不用继续往下读了。请期待我另外的两篇文章吧。</p>

<!-- more -->


<hr />

<center>我最喜欢流水账了的分割线</center>


<hr />

<br/>


<p>这一年发生了很多事情，但是大部分都在计划之中。</p>

<p>十一月份滚回家，在家里一直看美剧，休息了两个月。（其实是我不记得除了看美剧我到底干什么了，又没有写日记，各大网站上都找不到自己的活动记录。）修改：我在家呆了几天就直接回学校了。在学校花了四个星期时间修满了学分，途中还写了这辈子第一个RPC——middleware，用的还是从来没用过的Ruby。在学校还接了现在的Offer，给自己电脑加了内存，修改了简历投了湾区各大公司（并在接下来的几个月里被搓）。找@icek内推了豆瓣并拿到Offer（然后发现时间错不开拒掉了）。</p>

<p>这样就到了元旦。我在元旦这一天坐上了回家的火车，开始了漫长的寒假。寒假基本贡献给了Cousera上的Compiler作业（和搜狐上的美剧）。这点可以从<a href="https://github.com/ditsing/compiler" title="Compiler">Github</a>上的<a href="https://github.com/ditsing/compiler/commits/master" title="Commits">commit</a>纪录看出来。当然我也参加了好多场TopCoder，其中大部分以暴跌收场。看我的人生这么艰难大家就不要拆穿我了。</p>

<p>开学了之后我的主要活动就是Compiler和毕设了。在开始做毕设之后的很长一段时间里（长达一个月），我的主要活动还是集中在Compiler的作业上。主要原因是配置Windows驱动开发环境实在是太蛋疼了，我装了两台Win7一台Win8外加一个虚拟机才搞定。直到四月份毕业设计的中期检查dealine之前的一周，数量巨大的commits被提交到了我在Github的项目上。中期检查的时候disk image parser已经可以用了。</p>

<p>中期检查之后我的工作的重心移到了XFSd的Windows接口上。开发XFSd的流程可以用Compiling Error(CE)&ndash;>删代码->CE->删代码->CE－>加代码->CE->删代码->CE&hellip;&hellip;&hellip;.&ndash;>WA->WA->WA来概括。经过5月初的一阵疯狂开发，项目在功能上基本成型了，但是有一个很大的Bug没有解决——磁盘镜像里的文件不能用命令行复制，但是自己写程序可以读出来。我花了很大精力来找这个bug的原因，但是直到毕设答辩也没找到。不过最后我还是fix了这个bug，但已经忘了是怎么fix的了。有些当时非常在意的事情，过了一段时间之后会发现也不过如此。</p>

<p>五月份六月份初这一段时间，我又回过头去写了Compiler的第三个作业。作业有判分脚本，用各种case测试程序。刷分的感觉跟刷题差不多，过程非常开心。而且这一段我一直在家，狠狠地享受了一把生活。</p>

<p>六月末七月初呢，毕设和论文时间。印象中我没有花多久在学习上面。很怀念我们班同学连续一周的疯狂聚餐。</p>

<p>之后是另外两个半月安逸的生活。安逸之中突然得知办签证要考雅思，匆匆准备了之后就在八月中旬参加了考试，成绩还算可以接受。接下来又经历了很多很多办签证流程。不过我的签证格外给力，所有材料提交之后四天就被批准了。拿到了签证之后我终于想到要做点实事了，于是把Compiler的最后一个作业刷到了满分，并且看完了所有的教学视频。现在计划把小作业和Quiz都刷完之后写总结。</p>

<p>最后就是刚刚过完的十月了。周末再来一篇文章写写搬家到悉尼的见闻。挖了好多坑啊。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[接近尾声：Facebook又三周]]></title>
    <link href="http://www.ditsing.com/blog/2012/11/11/jie-jin-wei-sheng-%3Afacebookyou-san-zhou/"/>
    <updated>2012-11-11T21:57:00+11:00</updated>
    <id>http://www.ditsing.com/blog/2012/11/11/jie-jin-wei-sheng-:facebookyou-san-zhou</id>
    <content type="html"><![CDATA[<p>第九，第十，第十一周。今晚是我本周唯一一个过了九点还不困的晚上。</p>

<ol>
<li>第九周本来是应该开始新工作的，结果却一直在对旧工作修修补补。新工作进展不错，雏形已经出来了。</li>
<li>第十周没有什么实质性的进展，尝试做了一个工具。实验发现工具的效果不太稳定，跟预想有很大误差。Mentor认为我没办法处理这个问题，于是让我先放下了。真正扫尾的时间到了。</li>
<li>第十一周扫尾，完成我一直在挂念的任务——重构那个巨丑无比的旧代码。为了搞清楚它的逻辑我真是脑袋都大了。让我重新开发估计也就一天就能搞定。事实上我确实重新开发了几乎所有重要的部分。800余行代码里连续没有改动的行数最大值小于13。</li>
</ol>


<p>这次没有心情再写流水账了。之前写是因为觉得这段时间很重要，发生的每件事情都要记下来。现在觉得不一样了，没有什么事情很重要。认真去生活，认真去思考，认真去品味。这就够了，犯不着大动干戈。
临近离开反而心如止水，没有思前想后的犹豫，没有患得患失的顾虑。在Facebook可以为未来奋斗，回到哈尔滨的也可以。</p>

<p>只可惜&hellip;</p>

<p>必须说，这将是一段珍贵的记忆。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一些想法：FB七八周]]></title>
    <link href="http://www.ditsing.com/blog/2012/10/21/yi-xie-xiang-fa-%3Afbqi-ba-zhou/"/>
    <updated>2012-10-21T22:05:00+11:00</updated>
    <id>http://www.ditsing.com/blog/2012/10/21/yi-xie-xiang-fa-:fbqi-ba-zhou</id>
    <content type="html"><![CDATA[<p>首先恭喜HIT_Encore拿下今年第一枚金牌，我死也瞑目了。今年注定是ACM@HIT丰收的一年，加油！</p>

<p>时间过的真快，在FB的第七第八周也结束了。这两周没有什么remarkable的工作：做幻灯片，修修补补加功能。基本都是在耍小聪明，没什么可以写的。</p>

<p>那就写写其他的。这两周我对未来的打算波动很大。</p>

<p>第七周之前我一直很坚定的要工作不要读书，但是第七周这个信念就动摇了。前几周碰到的所有同事几乎都是PhD，没有个学位真的不好意思跟他们打招呼。
给我的感觉就是没有PhD可能在Facebook不太好混。第七周的时候跟几个同事聊了聊这个想法，他们都说要是愿意申可以申一个，还不是太晚。于是我就心动了，觉得反正申一申也不费什么力气。只是我还缺
一个托福成绩，得找个时间把托福考了。一想到准备考试我就头大，何况这还是个考口语的考试。纠结。</p>

<p>第七周周四跟大馒头进行了中期总结，中间又被狠狠的打击了一次。确实，一没学分二没背景三没知识，靠什么号称自己excellent？所以我在G+上感叹说一切都来的太早。再给我半年时间，潜心修炼，什么都有了。</p>

<p>所以，还是去申个学校吧。周五去Google的路上又跟同事讨论了一番，明白了master和phd的区别。这样，申个学校的想法就在我脑子里深深的扎根了。一直在想什么时候去考托福，怎么考，怎么准备。
第八周一开始我就觉得应该选点有挑战的学校投，否则跟Facebook的offer比根本没有竞争力。但是就我这GPA，选这些学校太容易悲剧了。再想想还要跟教授陶瓷，真心觉得压力大：说都不会话。</p>

<p>到了周三，我又动摇了。费这么大力气只是给自己增加了一个不那么理想的选择，有必要吗？一会儿想，投一个也不费事，说不定会突然想体验一下新的生活；一会儿又想，直接工作多easy，申到学校也不会去的。<strong> 毕竟科研并不是我最想要的。</strong></p>

<p>真正让我放弃这个想法的是周四早上跟涛哥聊的天。他跟我描述了一下PhD的日常工作。我坐下来想了好久，觉得也不是非要去体验一下那种生活。可能是最近的工作比较有乐趣，比较有成就感，所以找第二条路的需求就淡了。</p>

<p>周六本来要去Sail的，起了个大早却错过了班车。于是又在家宅了一天，看电影看公开课，思考人生。</p>

<p>周日也是这样。周日晚上我室友回来了，我尝试跟他提了一下这个问题。他的看法很简单，如果我最终还是要工作的话，最多需要去读一个master。master才是我所谓的“学”东西，PhD是专心搞研究。而且，如果觉得自己的知识储备还不够，那我应该在工作之余Self Studying。Self Studying对我来说不是问题，花的时间可能会长一点，努力可能会多一点，我肯定还是可以学会的。再说现在还有Coursea这种神器，真的不用想那么多。</p>

<p>其实我现在还在纠结中，很纠结。这种事情吧，除非做了决定，否则肯定不知道哪个是更好的选择。</p>

<p>列一下想做的事情（已经copy至<a href="http://www.ditsing.com/todo-list/">Todo List</a>）：</p>

<ol>
<li>把具体数学和组合数学看完</li>
<li>在Coursea上一门Compiler的课，自己写一个Compiler</li>
<li>复习形式语言与自动机</li>
<li>把xfsd的项目做完</li>
<li>把N年前下的公开课看了</li>
<li>未完待续，想到了再补充，太长了就单开个页面</li>
</ol>


<p>流水账在下面，除了我应该没人能看懂。</p>

<!-- more -->


<ol>
<li>第七周周四：读代码，跟大馒头1v1开会，抱怨了前端工作的无聊。馒头很nice，问，你在哪些方面有经验？我可以帮你介绍Facebook的其他组。语塞。真心没有。没有还混什么混，老老实实当前端去！
晚上去Google吃饭，碰到了楼爷。大家不要问我楼爷现在在哪儿，我不会告诉你们的。</li>
<li>第七周周五：跟HR的Midterm，很顺利。中间谈到签证的问题，我问，要是我必须回国服务两年怎么办？HR说，我们可以等到你能过来的时候再说。轻松了许多啊</li>
<li>第七周周六：白天上午睡觉了，下午徒步出去走了走，到downtown吃了点东西，看喷泉听街头艺人的音乐。心里很安静。晚上到同事家一起玩儿跟杀人游戏类似的游戏。大家High到两点多。回来的路上跟组织活动的同事大概讨论了一下选校。</li>
<li>第七周周日：白天上午睡觉了。我发现我周末基本就是在家睡觉。下午去买菜，炒菜，蒸米饭，自己吃的挺happy。幻灯片太不好做了，纠结了很长时间。</li>
<li>第八周周一：中午跟大小mentor讨论了我的幻灯片，结论：惨不忍睹。他们点评之后我也觉得惨不忍睹。后来小馒头提了一个无比简洁的建议，这才好看了一点。晚上改幻灯片改到很晚。顺手做了点小修补。</li>
<li>第八周周二：馒头们都是好人呐，说换项目就换项目了。不用再做前端，改做后台一点的东西了。但是我上一周看的代码基本就白看了&hellip;..让我交个片段再换也好啊！</li>
<li>第八周周三：流程继续，修修补补。接受新项目，开始看手册、换着参数做试验。早上碰到一个之前一起开过会的同事，跟他讨论了下申请学校的问题，他就找导师给了我第一手的建议。</li>
<li>第八周周四：新项目有进展了，写了个Bash脚本跑跑数据。早上遇到了涛哥，讨论了很多。</li>
<li>第八周周五：完成了一个半成品，觉得进度很不错。</li>
<li>第八周周六：白天上午没睡觉，看电影了。下午买了点菜，给自己做了顿面条。煮的有点过了。晚上去同事家看电影——《穆赫兰道》，看到两点。晚上艰难的入睡了。</li>
<li>第八周周日：宅在家里一整天，一整天。苦思未来。晚上跟Cornell室友聊了聊，接受了建议。还是这个问题：假如最后我一定要进入工业界，为什么要走弯路去留学呢？</li>
</ol>


<hr />

<h2>Appended At 10.22</h2>

<ol>
<li>第九周周一：上午浪了一上午，下午干活，稍微找到了点门路。加油吧亲！</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FB第五六周]]></title>
    <link href="http://www.ditsing.com/blog/2012/10/10/fbdi-wu-liu-zhou/"/>
    <updated>2012-10-10T22:48:00+11:00</updated>
    <id>http://www.ditsing.com/blog/2012/10/10/fbdi-wu-liu-zhou</id>
    <content type="html"><![CDATA[<p>上次写日志是17天之前了，懒了。
这两周生活丰富了很多，公司组织了不少活动，自己也认识了不少PhD朋友。BS跟PhD果然不是一个等级的，感觉大家想的东西差的太多。</p>

<p>上周六去了附近的Big Basin公园爬山，当然是被同事包养去的。见识了高耸入云的红木和幽静深沉的森林，感觉人生观又有不同。</p>

<p>另外一件大事就是自行车丢了，也是毁三观的事情，米国也有人偷自行车！到现在也没有报警，因为觉得找回来的希望不大。没有了自行车，剩下半个实习期恐怕要少了很多阳光了。也想过再买一辆，但是觉得没剩下几周了还是算了吧。惆怅啊。以后再要出门只好请人带着或者，借室友的自行车了——反正他也不骑。</p>

<p>然后就是痛恨前端的感觉越来越强烈。我一点也不想再做前端的工作了。</p>

<p>太晚了，先这样吧，明天后天想到什么再更新。</p>

<hr />

<p>以下依旧是流水账，路人切记一定要绕过！！</p>

<!-- more -->


<p>周一 改代码呀改代码。第一次接触到unit test，觉得很新鲜。其实不过如此。依旧在折腾前台的表，彻底明白了HTML里class，name，value，id四个属性的用途。</p>

<p>周二 第一次跟用户讨论我的代码，得到了不少建议。PHP和CPP果然还是不一样，PHP程序员不会吝啬复制一个数组，甚至不惜把一个数组当作下标来用。设计完整的库终于被提交了。</p>

<p>周三 噩梦来了，这才是真正的前端程序员。尝试将前台与后台整合。下午是InfraSummit，就是我们一个大组的所有人到一个五星级酒店开一下午大会。介绍一下最新成果什么的。这天晚上十一点还在干活。</p>

<p>周四 继续搭框架，遇到各种关于表单的问题。苦思解决办法，甚至还直接用了点Ajax。知道了<code>&lt;table/&gt;</code>这个东西其实是用来排版的而不是专用在表单里的。</p>

<p>周五 摸索着写出了第一段JS非抄袭的JS代码。设计出了一个巨复杂的展示数据的表。设计了一套方法使得整个系统的可复用性更高。偷用了别的组件的CSS。</p>

<p>这周的五天基本没有在八点之前下过班，疯狂折腾，觉得时间不够了。还一直在纠结JS的问题。就一个组件的实现跟馒头讨论了很久很久。</p>

<p>周六 骑车去了一个很远很远的超市，因为周日是元宵节打算买点月饼，失败了——太贵而且看起来不好吃。于是自己回家DIY。骑行里程16 miles。还吃了一次BurgerKing。买回来很多蔬菜水果</p>

<p>周日 宅了一天，给自己做饭。</p>

<p>第六周</p>

<p>周一 实现上周的想法，修漏洞，挪代码。开始写第一个对话框。尝试套用旧方法解决问题失败。</p>

<p>周二 跟mentor讨论想法，并向用户求证，明确了需求。最终放弃了复杂的设计改用最简单直接的方法。向一个JS大牛讨教了JS的基本概念，豁然开朗。</p>

<p>周三 获知大馒头要回来了，未来开始不确定了。不过没有时间多想，飞速实现了最后一个组件，代码基本可以提交了。</p>

<p>周四 整理并提交代码，坐等Review。两周的工作，1200行。经过了自己的MidPoint Review，感觉压力不大。</p>

<p>周五 修改上次一提交，闲。</p>

<p>周六 上午去Hiking，走了8 miles左右，人生第一次见到了瀑布，还拍了照片。晚上去了旧金山湾的一个小岛上参观监狱。</p>

<p>周日 发现自行车丢了。宅。</p>

<p>第七周</p>

<p>周一 大馒头开始改需求了，哭。开始痛恨前端的工作。</p>

<p>周二 跟小馒头讨论了下一步的计划，觉得稍微清晰了点。实现了大馒头的需求。</p>

<p>周三 看了一天代码，对下一步要做的事情心里有数了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FB第三四周——无聊的连载]]></title>
    <link href="http://www.ditsing.com/blog/2012/09/22/fbdi-san-si-zhou-wu-liao-de-lian-zai/"/>
    <updated>2012-09-22T22:44:00+10:00</updated>
    <id>http://www.ditsing.com/blog/2012/09/22/fbdi-san-si-zhou-wu-liao-de-lian-zai</id>
    <content type="html"><![CDATA[<p>今天下午去超市疯狂购物，花了三十多美元。爽！</p>

<p>两周并作一周写吧。让我好好回忆回忆这两周都做什么了。
第三周大部分时间还是在写代码。这周开始有乱七八糟的事情了：信用卡，SSN，还有无聊。无聊是最大的障碍。每天下班回到家，除了上网没有什么有意思的事情可以做。基本到家的时候天就黑了，周围也没有同事朋友，在家里基本就是看电视看书发呆。越是无聊晚上还越是睡不着觉。于是第二天精神很差，效率也不高。唉。</p>

<p>周二一大早我就跑去Bank of America开了一个银行帐户，把周一刚发的工资存了进去。利息什么的就不想了，按照米国现在这个利率，我一年也就能拿几块钱。开帐户附送一张借记卡，这样我就可以花自己的钱了！虽然爸妈可能看不到，但是我还是想在这里跟他们说声谢谢。二十一年了，辛苦了！</p>

<p>第四周倒是很充实，虽说干的是码农活，我还是学到不少东西。印象最深刻的是：做事情一定要有计划——详细的计划，每周做什么、每天做什么。
只有一个含糊其辞的大概规划是不行的，一定要有对每个细节的考虑。这样不仅馒头来问的时候有话可以说，自己也能控制自己的进度和时间，干起活来才有效率。</p>

<p>还要提醒自己的是要稳重，不能一激动就把代码交上去了。馒头说，我们工作的唯一产出就是代码，因此对这个东西要求一定要严格。深以为然。</p>

<p>在FB的三四周很快就过去了，这就意味着实习生活已经过去了三分之一。这两周我想了很多，觉得这次实习固然是一种很好的经历，但是它对于我的帮助最多也止于此了。
我想了解美国，但是语言不通、空闲时间不多，又在这样一个小城市里。连我的馒头都说这里中国人的圈子往往仅限于中国人。这样的经历显然不能跟在米国留学、呆一年两年的比。
技术上呢？做码农活主要还是看自己，他人能给予的指导帮助也很有限。不过FB有一点我很满意，就是给我的Project是我一个完成的，这也能成为我简历里的一个亮点。
剩下的还有什么？也许最大的帮助就是钱了。有人说钱多的码农活也能干，我说那咱还不如去铁道部混呢。</p>

<p>突然又不甘心于当码农的命运了。资深同事告诉我说在FB这样的公司搞工程，本科生就够了。这对我来说最多算一个安慰。回来之后我自己在纸上画了画，觉得可以感兴趣的东西很多，工程最多也就排在第四第五的样子。回头看看我这GPA，再看看我这出身（大HIT啊），还是算了吧。我甚至想过先工作两年再去读书，异想天开吧。又迷茫了。</p>

<p>以下是流水账，大家绕过吧：</p>

<!-- more -->


<ol>
<li>第三周周三周四搞定了一个小的mile stone。提交的代码基本没有再修改，happy。甚至还抽了点时间去学JS。</li>
<li>然后周五就苦等代码被Review，也没有心情做其他的事情。荒废了一天看各种代码。朝下一个各种简单的mile stone进发。</li>
<li>周六周日在家宅了两天，好像哪儿也没有去。</li>
<li>第四周周一搞定了unit test。提交了在FB的第一个PHP代码。不出所料，千疮百孔。以前做过点PHP的东西，但和FB的风格很不相符。晚上收到了SSN。</li>
<li>周二去BOA开了银行帐户，但是没有开信用卡。下午回来跟mentor讨论了进度，感觉还可以。下午开始尝试搭网页。</li>
<li>周三花了一个上午的时间读代码找例子，终于对要做的事情心里有数了。下午就在调各种网页的布局、组件，成功变成了一个HTML码农。</li>
<li>周四继续HTML码农，不过改调CSS了。加了几个效果，网页设计基本定型，再也不想改了。</li>
<li>周五琢磨按钮和Ajax的事情，看了不少例子，基本明白要做什么了。把按钮加上了。中间馒头过来说要把UI设计全了。下午改折腾table了，发现FB内部似乎没有一个合适的table给我用。</li>
<li>周六去跟一堆同事一起吃饭。回来的路上跟载我回来的同事讨论了下职业规划。他建议我去申个斯坦福MIT什么的，当时我就哭了。虽然当码农心有不甘，但是貌似也没有什么别的出路了。</li>
<li>周日早上给自己炒了个菜——番茄炒蛋，下午去了图书馆。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FB第二周——连载]]></title>
    <link href="http://www.ditsing.com/blog/2012/09/11/fbdi-er-zhou-lian-zai/"/>
    <updated>2012-09-11T22:59:00+10:00</updated>
    <id>http://www.ditsing.com/blog/2012/09/11/fbdi-er-zhou-lian-zai</id>
    <content type="html"><![CDATA[<p>写文章的时候才发现今天是个特殊的日子。入乡随俗，为不幸的人们哀悼吧。</p>

<p>好吧这个连载真的很无聊。这次就不要一天一天的写了，来点意识流的。</p>

<p>鉴于众神都把mentor叫做馒头，我就跟风一把。大馒头居然上周就去旅行了，还要十月份才能回来。于是我的老师就只有一个小馒头了。小馒头本科清华，拿到了斯坦福的offer但是没有去，去了全奖的密歇根。Orz一个先。小馒头非常和蔼，又非常认真。我的第一份python脚本被他挑出来20余处问题，于是我上周二三四就只在忙这一个脚本了。FB明明有lint可以在commit的时候检查代码的，不知道为什么python没有这个检查，导致我犯了很多无聊的（缩进）错误。欣慰的是我学到了不少python的姿势，也算不白写了。小馒头非常照顾我，跟我讨论的时候能用中文就用中文了，泪牛满面呀。以后不能太怂了，要敢跟人说话才行。</p>

<p>周五终于有点空闲时间了。脚本完成的差不多了，坐等馒头们accept。鉴于我接下来的工作是写个网页，我决定先去看看手册。FB的各种模块做的非常好，从架构到UI提供全方位支持，这就不提了。作为一个构建在PHP上的帝国，FB在PHP上果然还是有一手的。FB有自己的PHP编译器hphp（叫做Hip-Hop，把PHP编译成C++代码），调试器hphpd，解释器hphpi。hphp用来跑真正的网站，hphpi和hphpd用来测试调试。除了提升代码本身的执行性能之外，FB还对数据访问做了优化，思路很简单但是据说效果很不错。伟大的网站还需要伟大的技术作后盾啊。</p>

<p>周六放假啦，决定骑车去斯坦福转一圈。上午宅在家里做饭玩儿，下午两点多才出发。骑车二十分钟就到了，看到地图上写着Standford，周围却找不到任何斯坦福的标志。这就是传说中没有围墙的大学吧。我在校园里不辨方向，信马由缰的乱跑，跑了一个小时也没有看到重复的景色。四处可见大片大片的草坪、树荫；楼宇稀稀落落的，很安静，粗糙的砖墙给人一种厚重的感觉。大概是因为周末吧，学校里人不多，有很多跟我一样的游客。也看到不少妹子在跑步——还看到一个自己霸占了整块草坪趴着看书的妹子。在这样的学校里，跑步看书总相怡呀。我就不吐槽我大哈工大了。</p>

<p>周日在家宅。没有别的可以写的了。周一继续读代码，想要瞬间搞清楚FB是怎么工作的还真是很困难。</p>

<p>周二也就是今天，我终于下定决心去申请SSN了。路线依旧是先Caltrain再bike。没有费什么力气就找到了Social Security Administration。本来以为里面会是空无一人的寂寞场面，谁知道里面竟然有一二十人在排队。碰到了两个在米国工作要申请SSN的美女，于是乎感叹大美利坚是不是要被中国人占领了。等了半个小时，轮到我了。办的过程没有费什么周折，把文件交给工作人员，过了一会儿她就递出一张纸要我核对信息。核对完了又递出一张收据，这就算结束了。完全没有想象中的难度，话都没有多说两句。</p>

<p>Happy的办完手续，就是苦逼的回家之路了。太穷买不起车票，只好骑车回公司。半个小时的跋涉，背上都湿透了。最近几天我的累计骑行历程应该已经超过了30公里。去斯坦福的时候还专门把车调到了最费劲的那档，享受一下自虐的乐趣。</p>

<p>到了公司之后依旧是看代码写代码。下午跟小馒头商量了一下我本周的工作计划，貌似我的进度超过了馒头的期望，或者是我低估了工程的难度，总之形势一片大好啊。回去继续扣吧。</p>

<p>这周还在等Google那边的消息，不知道结果出来了没有。我的签证赞助商也没有给我回信，告诉我到底用不用回国两年。SSN也要两周后才能拿到。我能做的就只有等待而已了，安心工作，不要想其他了。最近看到大家在G+上讨论自己的生活，遇到的题目，碰到的大神，还有自称loser，觉得有一种莫名的温馨。希望好基友都能一辈子吧。</p>

<p>PS:意识流完结。什么？居然还是按时间顺序！这是程序写多了干什么都要一行一行来么？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FB第一周]]></title>
    <link href="http://www.ditsing.com/blog/2012/09/01/fbdi-yi-zhou/"/>
    <updated>2012-09-01T12:44:00+10:00</updated>
    <id>http://www.ditsing.com/blog/2012/09/01/fbdi-yi-zhou</id>
    <content type="html"><![CDATA[<p>又是一篇跟技术毫无关系的博客，技术控们可以直接绕过了。</p>

<p>八月二十五日十点我坐飞机从郑州出发，八月二十五日十一点到达旧金山，飞了足足十六个小时。海关什么的没有传说中的那么吓人，问了一句话就放行了。出关的时候遇到一位学油画的姐姐，都已经工作了，又突然想来旧金山接着深造。当时觉得这个姐姐很面熟，后来才想起来，真的好像好像陈蓓学姐啊（嘘&hellip;&hellip;..）。</p>

<p>下一步是坐地铁，花了一个小时换开零钱，买了票走进车站。火车马上就要开了，身后一位黑人大姐冲过来问我说要去哪儿，我说“Millbrea”，她拉着我就上了火车，然后指着地图跟我说，如果你想去那儿，你得这样，到这儿下车，然后换反方向坐回来，坐两站，两站就够了。生怕我听不懂重复了好多好多遍。下飞机就见识到了米国人民的热情，我的心情突然好了起来。然后是转车，再加上四十分钟的步行，我找到了公寓，收拾一下倒头就睡。晚上睡醒了我发现最近的超市在4公里外。饿啊，还是步行去采购了点看上去能吃的东西。</p>

<p>二十六号我度过了无聊的一天，手头是各种文件、各种表，各种邮件。晚上还经历了大概是六年来最长的一次失眠。忘了说了，住的地方条件还不错，两室一厅加厨房卫生间，地毯大床，可惜的就是卧室见不到阳光，所以我总是待在客厅里。</p>

<p>二十七号是正式上班的日子啦，坐公司的shuttle到了总部。在大堂等了半个小时，HR姐姐终于来领人了。然后是早饭和长达一个上午的演讲，我得坦白说我没听懂什么。下午是发装备和Setup，手机和电脑到手。当时还是很开心的，不过装备都是旧的。一天下来我困的都要死了，晚上回到宿舍却继续失眠。躺在床上，我无奈的翻出了三毛的书，看了足足一个晚上。三毛是个会用全身每个毛孔品味感情的人，她的文章纯粹而深切。真好。</p>

<p>二十八号早上我成功的爬了起来，上午继续开会，下午大家被召集起来学写代码。布置了第一个作业叫做first_assignment。所以你们知道FB的人有多无聊了吧。接下来的三天我这个assignment绊住了，所以你们知道我有多无聊了吧。</p>

<p>期间我跟我的mentor见了面，讨论了我们要做的工作。这周余下的时间基本在无聊和无聊之间度过，看代码，看wiki，尝试写点PHP。纠结的是跟人沟通特别不通畅，别人稍微说难一点的词汇我就听不懂，自己想说什么基本就是说不出来。好在我天生脸皮厚，连比划带猜，终于把上班时间混过去了。</p>

<p>回到家里的时间也很难熬。室友是康奈儿（Cornell)大学毕业的高材生，已经在美国住了10年了。据传该大学是米国最难毕业的大学之一。我很想跟他聊聊，可是无奈我们俩等级差太多，我基本没法跟他沟通，连跟他请教个洗衣机怎么用都要比划半天。两个人相对无言，自己玩儿电脑。二十九号白天就在纠结作业中过去了，漫长的周三啊。这天晚上又饿又睡不着，我尝试了做俯卧撑，看电影，看书等等方法，最后实在没辙了，拿出爱疯听广播，米国怪叔叔讲故事。好吧，终于睡着了。</p>

<p>结果呢？一觉睡到大天亮，早上十点才醒过来。所有shuttle都走了，但是十一点还要开会的啊混蛋！我只好自己坐公交去上班。从家里到公司不远，但是要倒车，先#35再DB。我首先成功的看着一辆#35从我眼前开过，没有赶上——米国的公交都是一个小时一班的好不好！我决定走到DB那里去。走了半个小时之后第二辆#35从我身边超了过去——我＃＃＃。等我花了四十分钟走到DB站点的时候，发现自己没有带够零钱，而且下一趟DB又要四十分钟之后才过来。为了度过这四十分钟，我就近找了一家人讨了一美元，这才得以上车。可是这可恶的DB居然没有报站，当我决定要下车的时候司机告诉我，“No more stops here.”。于是我被迫跟着DB一起跨过了旧金山湾才得以下车。旧金山湾啊亲！！然后呢，我花了一个小时等下一趟DB，再坐回来。好在两趟车是同一个司机，没有多收我钱。我到公司的时候已经两点了，嗯，直接去开下午的会好了。</p>

<p>周五一天无言，配置服务器、bash、git、vim、python、screen，都是这些东西。下午的时候我发现，周六早上有一场TC，好开心啊。我趁着早上两点多睡不着觉的空档配置了Vim、Topcoder Arena和插件，花了一个多小时，然后终于睡着了。周六的TC跌了20点Rating，不过还是很开心。开心得决定下午去买一辆自行车。到了店里我直接告诉店员，我有350美元预算，给我推荐一辆吧。于是我拿到了和室友一样的车——山地车里最便宜的那种了。有了车生活就美好一点了，买东西吃、东逛逛西看看。</p>

<p>周日我买了米，在家里学煮粥，跟室友一人半碗。以后想吃好吃的、口味清淡的就只好自力更生了。</p>

<p>周一，我去了旧金山。对呀，周一是Labor Day，放假！本来拟去找中国大使馆的，坐了一个小时火车、又骑了一个小时山地自行车——感觉旧金山就是在山上的——到门口才意识到，啊，他们也放假，SXXT！我只好简单逛了逛旧金山，惆怅的回家了。回来我也没闲着，尝试用电磁炉蒸一锅米饭。从五点忙活到六点，一部纪录片都看完了，米饭里的水终于基本上蒸干了。一尝，熟的！</p>

<p>周二呢？写了一天python脚本，数据库什么的，然后在这里写流水账。流水账写完了，下面的生活就该步入正轨了。豁免拿不到就拿不到吧，回国也挺好，还可以在爸妈身边。Fighting!</p>

<p>最后祝愿今后我大HIT的毕业生都能找到自己的归宿，学校给不了我们什么，全靠自己了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google面试]]></title>
    <link href="http://www.ditsing.com/blog/2012/08/19/googlemian-shi/"/>
    <updated>2012-08-19T22:33:00+10:00</updated>
    <id>http://www.ditsing.com/blog/2012/08/19/googlemian-shi</id>
    <content type="html"><![CDATA[<p>两个星期之前的一个周五下午，我正在家里寂寞的学着JS，一封突然到来的邮件打破了我宁静的生活——&#8221;Greeting from Google!&ldquo;。眼看明年的工作还没着落，我欣然接受了邮件里的面试邀请。跟一个Google中国的HR用英文发邮件是件很奇怪的事儿，不过HR很给力，我的面试日期很快就定下来了。</p>

<p>Google面试的风格跟我面的其他公司很不一样，每次都会要求自我介绍——就是介绍自己的项目。各位有志于Google的童鞋最好先准备一下。顺便提一句，我每次说的项目都不一样哦。</p>

<p>一面是这样的，首先是自我介绍——blablabla说了点。然后是一道很无趣的遍历二叉树的题，面试官规定了我需要实现的函数的原型，让我先说说想法然后写代码。我说了一个做法，然后实现了另外一个（囧）。最后面试官给了一道题目：</p>

<blockquote><p> 求一个数字集合里最长的连续数字串的长度。例如<code>{ 1 2 9 10 11 3 12 7}</code>中的<code>{ 9 10 11 12}</code></p></blockquote>

<p>我的第一反应当然是排序了。面试官问有没有更好的解法，经过他的提示我想到了Hash。但是在估计复杂度的时候，面试官坚决不同意我“可以认为Hash中的冲突很少”的看法。所以我得到了<code>O(N^2)</code>的复杂度。事后我一想，不能认为Hash冲突很少我还用个毛Hash 啊！面试完的那个晚上我没有睡着，脑子里全是这个问题，但是没有找到更好的方法。请问各路大神，这题有没有更优的解法？</p>

<p>二面同样给我留下了深刻的印象。自我介绍，blablabla。面试官出的第一题是从一个数字串中找到最长的递增子串。很显然是<code>O(N)</code>的对吧，面试官问我有没有更优的。我嗯啊呀哈了五分钟之后，面试官说，如果要求递增的差为1，有没有更优的方法？我&hellip;.扯了一个没有用的方法给他。第二题是二合一，首先面试官要求我求出一个线段集合里相交的线段。我先搞了一个naive的线段合并，可以判断出某线段是否和别的线段相交。之后面试官增加了要求：</p>

<blockquote><p> 输出线段集合中的相交线段的子集，如果线段<code>A, B, C, D</code>中，<code>A, B, D</code>两两相交，<code>B</code>和<code>C</code>相交，<code>A</code>和<code>C</code>不相交，输出集合<code>{A B D}</code>和<code>{B C}</code>。</p></blockquote>

<p>我首先给出了离散化并查集的<code>O(N^2)</code>方法。有没有更优的？我当场怀疑这样的集合会有<code>O(N)</code>个，每个会有<code>O(N)</code>个元素。但是当时没有找到这样的例子，于是扯了一个Splay延迟标记维护的方法并号称是<code>O(NlogN)</code>的。事实证明，还是存在能让输出复杂度达到<code>O(N^2)</code>的例子的。我又花了一个晚上才想到的这个例子。</p>

<p>不管怎么样，我拿到了Onsite的资格（八成是考虑到竞争对手的Offer吧）。Onsite就靠谱多了，至少题目都是可以答的。</p>

<p>一面第一步照例是自我介绍，blablabla。第二步是个不太难的题目，跟线段相关的。题目不重要，重要的是面试官首先要求我详细的叙述我的想法，之后在纸上写伪代码，最后要求我翻译成代码，并且要用设计合理的函数完成这个程序。第三步是个加强版的题目，因为时间不多了我草草写了几笔。</p>

<p>中午跟面试官一起吃了饭，畅谈了一下人生理想。面试官建议我不要急着工作，先去旅旅游见见世面，还跟我分享了他当年单独去越南旅游的经历。我本来还想明年先来实习呢，但是现在觉得，玩儿命工作还是享受人生，这是个问题。顺便说一句，Google上海的自助餐厅大概只能容纳100人，借此可以估计一下Google上海的规模。另外，盛传Google中国没有什么技术类的活，其实不是的，他们还是负担着非常多的开发任务的。</p>

<p>二面的面试官是一个比较威严的工程师。他的题目也很有意思，都是比较偏向于数学的，每次除了描述想法之外，还要求有非形式化的证明。他在我证明的过程中要求我澄清几乎每个概念，力求严谨。猴神可能会比较喜欢这样的题目。两道这样的题目之后，面试官出了一道<code>Design</code>的题目，要求我设计一个关于指针的工具类，并独立做出各种决策。在考虑了N多问题之后，我卡在了拷贝的实现策略中，超时了。面试官安慰我说这样的题目是没有一个固定的答案的，讨论的过程更重要。</p>

<p>这样我的四次面试就结束了。虽然我自我感觉良好，但是我的表现实在不很完美。也许我应该等结果出来再来写这篇得瑟的博客。但是现在，我还是抓紧享受一下生活吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[松一口气]]></title>
    <link href="http://www.ditsing.com/blog/2012/07/14/song-yi-kou-qi/"/>
    <updated>2012-07-14T20:40:00+10:00</updated>
    <id>http://www.ditsing.com/blog/2012/07/14/song-yi-kou-qi</id>
    <content type="html"><![CDATA[<p>相比@bearzx和@luyi0619，我对自己的博客可以说是非常疏于管理了。转眼间又一个月过去了，我还是什么都没写。考完GRE我就彻底的放松了，一边心里想着“这说不定是我大学时代最后的几门课了”，一边堂而皇之的逃掉。唯一一门放在心上的课是软开三。疯了一样的做了两周，成果还是有点不尽如人意。还好我还有很多时间，课程结束了也可以接着做。虎头蛇尾什么的最讨厌了，我一定要把XFS这个项目做完！</p>

<p>7月1日这个神圣的日子之后，我就又忙碌了起来。忙什么呢？准备申请签证要的各种材料。材料总的来说有三类，分别是米国方面的表，学校的成绩单和注册证明，家里需要开的财产证明（其实根本没有人看）。这又少不了一通邮件电话，以及往学校的教务处跑。在这里我不得不吐嘈一下学校了，我在学校开了一份英文注册证明，一份英文成绩单，还有一份六级的成绩证明，办的是加急业务，学校收了我140块钱。其中竟然包括30块钱的成绩单的翻译费，理由是要把成绩单上所有课程名字翻译成英文——难道学校会单独翻译每个人的成绩单上的每一个课程名吗？这就是立志要建世界一流大学的工大的做派。</p>

<p>跑题的话不多讲。材料齐备之后，我填了申请表格，预约了7月9日在沈阳领事馆的面签。结果7月7号我在网上闲逛，突然发现申请表格里最后两个证明人写错了！要求是中国人，结果我写了俩米国方面的联系人。当时我就傻了，因为重新填表已经来不及了。还好有经验丰富的同学指导，告诉我无所谓，让我到使馆了再想办法解决。</p>

<p>又要往沈阳跑一趟了，还好我上次考GRE的时候已经来过一趟，对北站附近比较熟悉。稍微做了点调查之后就出发了。几经波折终于熬到了第二天的面签。过程不多说了，签证官非常信任我，一听说是去Facebook实习的几乎没问我什么实质性的问题。他甚至问我“你是在Facebook中国工作吗？”临走的时候他还让我“Bring Facebook to China”。这样整个签证过程就结束了，我要做的就是等着收快递了。</p>

<p>本来想的是这个博客只谈技术不说生活的，可是最近这半年里实在没有什么技术可以谈。我还谋划过要写一篇关于XFS架构的文章，一篇关于基地网络的文章，一篇到沈阳考GRE和签证的攻略。各位也看到了，一个都没有写出来。在此立文为证，这三篇一定要写出来。尤其是关于基地网络的，暑假开始了我就离开学校了，在这里集训的学弟们肯定会碰到不少网络的问题，我得把我知道的都告诉他们。</p>

<p>最近有人问过我关于学校的看法，我毫不犹豫的表达了我非常负面的感情。想起当年面企鹅的时候，面试官也问过我类似的问题。我当时的回答是，如果说学校对我有帮助的话，更多的是硬件上的帮助：给我提供了宿舍食堂和全天可用的ACM机房；我的同学们给我的帮助和影响更大，没有ACM俱乐部这些人，我肯定混不到现在这样。至于学校呢，给我印象最深的几件事依次是：<strong>作业纯抄袭，考试往年题；实验抄数据，项目不出力；团委活动多，自愿必须去；瞎评奖学金，不服书记急</strong>。当然工大也有像lord和sunner这样有远见的老师的，也有像唐奶奶和李建中老师这样神一样的存在的。在工大读书，是一件挺悲哀的事儿；在工大遇到好老师，是阴霾的天空里单薄的一缕阳光。殷切希望工大能少耽误几个学弟学妹。</p>

<p>本学期再没有什么能让我上心的事儿了，休息，休息。准备好接受下一个挑战吧！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[临时小记]]></title>
    <link href="http://www.ditsing.com/blog/2012/06/18/lin-shi-xiao-ji/"/>
    <updated>2012-06-18T20:12:00+10:00</updated>
    <id>http://www.ditsing.com/blog/2012/06/18/lin-shi-xiao-ji</id>
    <content type="html"><![CDATA[<p>晚上回完邮件放松的时候，突然听到@icek童鞋说要写博客。爬上来一看我已经有足足两个月没有写一个字了，都对不起我买域名那五十块钱。</p>

<p>那最近两个月都干什么了呢？记得做了很多事，具体有什么忘了，大概是写简历啊面试啊参加比赛啊&hellip;.还有，回邮件啊什么什么的。还好我养成了写note的习惯，可以翻翻自己的note找找过去的足迹。还有G+上的post可以作为佐证。</p>

<p>4月份面完微软之后，我生活的中心有三件事（4月29日的note）：</p>

<ol>
<li>compiler，也就是编译原理的课程和实验；</li>
<li>jwc，就是那个破项目，那时候基本已经完成；xfs，就是那个破项目，你懂的；</li>
<li>GRE，在@luyi0619和@bearzx同学的带领下，我也来搞一搞G；</li>
</ol>


<p>所以这一段呢，生活无非就是按时上课，有空写写代码，没事儿背背单词——虽然效果很差。当然这时候Facebook的事情已经基本有了定论，心里就不是那么在意了。GRE和XFS在我心里是非常非常重要的事儿，都是关于前途的。当时确实挺蛋疼，每天在G+上贴自己读XFS代码时的“新”发现，却没想起来去讨论区里写个总结。五月四日确定收到offer之后小小的高兴了一个星期，收到了无数的祝贺。兴奋很快过去，心里清楚需要完成的事情还是太多，焦虑卷土重来。</p>

<p>总的来说这一段状态还不错，期间还做了TCO和GCJ，跟大家欢乐的刷题的日子将是我一辈子最珍贵的回忆。</p>

<p>随之而来的是5月8号百度的面试，想去刷一刷，结果错过了投简历的时间，内推又莫名其妙的没消息，只好作罢。忙里偷闲修了几个jwc的bug，检查了检查自己的简历，发现自己之前居然连电话和邮箱都没留，怪不得没人理我。这一段的状态非常不好，累，没有什么成就。</p>

<p>5月14号Facebook那边传来了一个非常不好的消息：我只能以交流访问学者（J-1 visa）的身份过去实习。这跟H1B工作签证有本质区别啊！为了这个问题我纠结了好久，不过显然实习机会不能放弃，就算实习完之后不能再去米国，在国内G啊M啊甚至B啊T啊A啊找个工作也可以接受。</p>

<p>5月20号是ACM俱乐部的春季校赛。坦白说我没给这次校赛做什么实质性贡献，出了两道最水的题，帮助维护了一下现场秩序。在@icek童鞋的领导下，校赛很成功，奖品发的也让大家很高兴，作为一个半截入土的老ACMer，真的很欣慰。</p>

<p>话题回到实习上来。接受J-1的无理要求之后，HR扔给我房子和机票的链接，于是我开始了漫长的定房子与订机票的过程。眼看办签证也已经迫在眉睫，我连个护照都没有。但是，办护照要回家啊回家啊回家啊！付出逃课一星期的代价，我回家一趟搞定了护照，还请老爸帮忙办了一张信用卡。在家的时候还下河走了走，都忘了自然是什么样子了。</p>

<p>回顾一下你会发现，我完全无视了最初认为很重要的编译原理。我现在仍觉得它很重要而且非常后悔这么课里自己什么也没有学到。分数上的差别不是问题，问题是学习的时机稍纵即逝，以后我可能再也没有机会回到这一课题上来了，淡淡的忧伤啊。</p>

<p>还是忍不住要说说实习，5月份我跟HR、租房子的公司、卖机票的公司、律师事务所、交流项目赞助商来来往往发了无数封邮件，超过我之前二十年发过的邮件数的总和。Thank you说了无数次，ask for help了无数次。作为一个英语只能用于应付考试，一篇140个字的作文被挑出10几处毛病的naive user，我在这中间的遇到的困难是你们无法想象的。还好这几位都非常nice，这些事情基本都顺利的搞定了。</p>

<p>仿佛瞬间就到了6月。完成任务并不能为我的生活减轻一点压力。6月16日的GRE考试已经近在眼前了。为了不浪费上千块钱的报名费，我决定放弃两个星期的课专心复习。打印了36套阅读，下载了模拟考试的软件，每天背着红宝书跑来跑去。我甚至有点享受这样的生活了——没有deadline的压力，没有纷繁复杂的日常琐事，只有简简单单的一个目标。提前一星期买好了火车票，做完了前期的功课，6月15、16日的沈阳之行异常顺利。在沈师找到了一个紧邻着学校围墙的小旅馆安睡，早上跟大家一起跳墙到机房去考试。考完觉得分数基本在预料之内，安心返程。</p>

<p>时间已经是6月下旬，大三最后的四分之一个学期。唯一剩下的任务就是XFS。我已经近一个月没有好好写代码了，重回开发状态确实很不容易——保留、恢复现场的能力实在是略差。写代码对我来说应该是非常幸福的事情，好好享受这最后一段平静吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微软霸王面归来：怒！]]></title>
    <link href="http://www.ditsing.com/blog/2012/04/19/wei-ruan-ba-wang-mian-gui-lai-%3Anu-%21/"/>
    <updated>2012-04-19T21:15:00+10:00</updated>
    <id>http://www.ditsing.com/blog/2012/04/19/wei-ruan-ba-wang-mian-gui-lai-:nu-!</id>
    <content type="html"><![CDATA[<p>今天早上六点我从睡意朦胧中醒来，开始了今天的MS霸王面之旅。</p>

<p>洗漱吃完饭加上各种杂事，我们一行四人到达香格里拉酒店的时候已经是七点半了。卢大神有面试通知，直接去面试了。icek大神，canoe大神和我尝试与HR姐姐沟通争取面试机会。第一被秒的是icek，他被秒的非常欢乐，具体细节不说了。HR姐姐留下了canoe学长和我的简历并承诺替我们找机会，因为面试官都很忙。十点卢大神面完了出来我们才被告知12点之前不会有时间了。于是我们三个就回到了学校。卢大神的情况貌似还不错，我们也都挺高兴的去上了半节编译原理。</p>

<p>中午十二点，我们基本放弃了希望，中午还没有通知肯定就是没戏了。但是我们吃午饭的时候，canoe学长突然接到HR的电话，要我们下午一点到酒店笔试。我们俩二话不说打车直奔香格里拉。拿到面试题之后HR给我俩就近找了桌子坐下写。题目估计是面试官中午的时候抽空出的。看起来不是很难的样子^<a href="#PS1">PS1</a>   ：</p>

<ol>
<li>合并两个链表（原文：Merge two linked lists.）；</li>
<li>求一个链表的倒数第五个元素；</li>
<li>求一个数的二进制表示中1的个数。</li>
</ol>


<p>按顺序看题吧。第一题，合并两个链表？怎么合并？题意不明确先跳过。第二题一下子也没有好想法。第三题！这不是<a href="http://www.matrix67.com/blog/archives/264" title="Matrix67 大牛博文">位运算经典题</a>吗？略加思考写了一个十六位的版本，觉得意思意思就好了。然后是第二题，这题意肯定不是让写回溯的啊，于是就YY了一个naive的方法。最后是第一题，我继承了第二题的思路，觉得肯定不会是naive的把一个链表接到另外一个后面，否则就应该用concatenate这个单词了。于是尝试向HR询问，失败。题意问题困扰了我好久。最后，我费了点时间，费了点精力写了个两个链表交错merge的程序。最终代码也很简单，但是不太好懂。</p>

<p>虽然说了很多，但是其实我们俩只花了20分钟就交卷了。HR姐姐告诉我们接着等。我们两个苦逼就在酒店大堂里干坐了2个小时，又困又累又热。中间交流了一下想法，我还发现了我第二题的做法有点漏洞，不过也无所谓吧。下午三点钟我们的答卷终于被送到面试官手里了。我和canoe学长就在HR的房间淡定的坐等结果。12分钟之后，HR姐姐拿回了结果，她先告诉canoe学长答的很好获得了面试机会。之后她对我说：很遗憾你的答案<strong>“错的太多”</strong>blablabla。</p>

<p>听完这句话，愤怒的情绪直接把我淹没了。什么叫“错的太多”？这样的三道题也能让我错的太多？怕是你的面试官没看懂我的程序吧。我立刻没有了跟她继续交流的兴趣，尽管之后她还说了几句安慰我的话。跟canoe学长告别之后我气冲冲的回到了学校，决心晚上写一篇博客吐嘈一下MS坑爹的面试。</p>

<p>你以为这就完了吗？错了。晚上做完实验回到基地，遇到了面试归来的canoe学长。他传达给我了一个更加狗血的消息：HR姐姐理解错了面试官的意思，面试官不是说我“错的太多”，而是说我“第一题写得太乱了”。所以我本来是有面试机会的。</p>

<p>难道这样就高潮了吗？不是！面试官还据此怀疑我第三题是<strong>背的！背的！！背你妹！！！</strong>我的肚子就这样被小人之心度了。我从早上六点折腾到下午三点，最后还被人说是“背的”！虽然我不太喜欢微软的作为，但我还曾认为MS是一个伟大的公司。现在呢？我只想说：MS，玩儿蛋去吧！</p>

<p>吐嘈归吐嘈，淡定了之后还是希望卢大神和猴神能和MS一块儿玩儿蛋去。祝两位神拿到offer，祝各位MS实习愉快！</p>

<p>PS0：非死不可的HR告诉我，不要“assuming the interviewer is smarter”。MS，领教了。</p>

<p id=PS1>PS1：如果在文章中公布微软面试题有任何不妥，请联系我。我没有签署任何保密协议。</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ACM俱乐部主席日常工作总结]]></title>
    <link href="http://www.ditsing.com/blog/2012/03/28/acmju-le-bu-zhu-xi-ri-chang-gong-zuo-zong-jie/"/>
    <updated>2012-03-28T13:47:00+11:00</updated>
    <id>http://www.ditsing.com/blog/2012/03/28/acmju-le-bu-zhu-xi-ri-chang-gong-zuo-zong-jie</id>
    <content type="html"><![CDATA[<p>看了这个题目，大家一定想说，你是主席吗你就敢写总结？鄙人不才，正是HIT ACM俱乐部现任主席。</p>

<p>HIT ACM俱乐部是计算机学院最有前途的俱乐部，没有之一。ACM俱乐部的主席却一点也不忙。虽然挂着主席的名，但是俱乐部日常的工作我是插不上手的。有我们的富二代金牌帝管理员<a href="http://icek.me">icek</a>大神在，俱乐部工作自然井井有条。那主席天天干什么呢？主席的职责有两条：</p>

<ol>
<li>给ACM基地修网。网络出问题的时候就是我出现的时候。</li>
<li>跟计算机学院的行政部门打交道。</li>
</ol>


<p>第一条自不必说，任何一个网管拉过来都能干的活。</p>

<p>第二条嘛，计算机学院虽然办正事的效率一向不高，折腾起人来可非常有一套。单周例会，双周交工作简报，两周发一篇<a href="http://today.hit.edu.cn">新闻</a>。时不时的替各个俱乐部举办活动，替各个俱乐部招新，期末还要根据平时表现给大家评分，真是用心良苦。例会什么的也就算了，我友情出现一下。工作简报嘛，俱乐部每周都办一样的周赛+讲座，交差不多的也行。新闻？不好意思，不陪你玩儿了，today.hit对ACMer一点意义也没有。</p>

<p>说到办活动，每年HIT ACM可谓不遗余力。秋季校赛规模宏大，要提前一个月准备题目、网站、机房、报名、条幅、气球。基本能把整个俱乐部折腾的人仰马翻，尤其是管理员（感谢历届管理员FF，oneplus和icek学长的辛苦工作）。还好每年校赛完了lord都请吃饭，也算不白忙一场。这儿斜刺里杀出来一个社联，突然要替ACM招新。嗯，我们这边新成员都开始训练了，不好意思。</p>

<p>所以呢，每次社联开会我少不了要说，“ACM俱乐部不参加招新“，”不参加xx文化节“，&#8221;不参加xxx”。主席只有这点儿事儿可干了。</p>

<p>啊，差点忘了，还有些别的事儿。例如校十佳社团评选，主席要准备材料上台演讲；有时候学院会向我要奖项统计；有时候申请经费要让俱乐部自己填表——我从来没见过计算机学院的经费长啥样；还会有其他不定期的填表任务。</p>

<p>总结完了，最后发广告，ACM俱乐部招聘下一任主席啦～除了干活，主席还是有福利的：</p>

<ol>
<li>评奖学金的时候可以加5分哦，5分哦～～关键时刻秒杀其他人的加分哦！</li>
<li>可以对别人说，我是主席。</li>
<li>可以偷偷在基地享受不限速带宽。</li>
</ol>


<p>愿意兼职的同学可以联系我，或者留言。先到先得！</p>

<p>PS：俱乐部真的应该加强一下这些日常的统计，多少队伍多少金牌多少银牌。希望未来HOJ能有这样的功能。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jwc2ical小记]]></title>
    <link href="http://www.ditsing.com/blog/2012/03/26/jwc2ical-xiao-ji/"/>
    <updated>2012-03-26T01:24:00+11:00</updated>
    <id>http://www.ditsing.com/blog/2012/03/26/jwc2ical-xiao-ji</id>
    <content type="html"><![CDATA[<p>谋划了一个学期的jwc2ical项目终于结束了，结果还算不错，有可用的产品，并且成功进行了推广。</p>

<p>jwc2ical是我的第一个有意义的“项目”。做完了收获还是很多的，在这里做个总结。</p>

<ul>
<li><strong>面对未知的时候，不要想“计划好了再行动”，尽快开始才是王道。</strong>例如moodle-local_jwci2cal里需要用到PHP，但是我从来没用过。寒假里找资料、教程找了很久，也比不上3月份fork一个本地插件一边写一边问雄哥。</li>
<li><strong>输出调试信息要输出key。</strong>所谓key，就是能帮助我们第一时间确定出错的位置、错误的种类以及引起错误的参数的信息。
例如，当从数据库里读出来的数据引起问题时，除了输出引起问题的域，最好再加上Primary Key部分。</li>
<li><strong>永远都不要依赖于全局变量。</strong>用函数返回值、持久化存储、常量等方法代替。全局变量在一个地方写、在另外一个地方读，这总能让我想起CPU设计实验里控制时钟周期以免发生读写冲突的例子。这是很讨厌的一件事情。</li>
<li><strong>在需要长时间运行的程序里，尽一切可能避免程序崩溃。</strong>

<ul>
<li>在一切有可能出问题的地方——函数调用，数据库操作，来自用户的输入——判断数据合法性。</li>
<li>把单个工作的崩溃log下来，继续其他的工作。留下的信息要足够恢复。</li>
</ul>
</li>
<li><strong>要么做到永远不崩溃，要么崩溃了以最快的速度恢复。</strong>为什么要有后半段？因为前半段并不总是可能的。</li>
<li><strong>考虑在崩溃的情况下整个程序能在多大程度上继续运行。</strong>哪些功能即使程序已经崩溃了也是可以依赖的？最好每个功能都是。</li>
<li><strong>做每一个假设的时候都要想，如果这个假设不成立怎么办？</strong>

<ol>
<li>假设不成立就要换一种方法来处理了。是不是抽象有问题？</li>
<li>假设不成立就会麻烦很多。提前做好面对麻烦的准备吧。</li>
</ol>
</li>
<li><strong>Quick and dirty的方法有时候很有效。</strong>适当引入能事半功倍。这是个权衡的问题。</li>
<li><strong>尽量把做事的函数和说话的函数分开。</strong>能分多开分多开。</li>
</ul>


<p>先写这么多吧。</p>

<p>moodle-loca_jwc2ical项目历时18天，大小bug不断。中途根据实际情况做了很多调整，最后的代码无比混乱，当然我是说PHP部分。Sunner老师给了我很多指导和帮助，没有他我写完这个项目一定会死的。项目前期缺乏有效的测试数据，这是麻烦的根源，甚至部署之后还出现了一次崩溃。还好Sunner老师不厌其烦的一遍一遍的部署测试，最终项目才能成功上线。感谢Sunner老师～我还得继续维护这个项目，没有人会愿意接手的。</p>

<p>最令我骄傲的是项目的Perl部分，也就是分析网页的脚本。除了两个已经预料到的错误假设之外，我没有对这个脚本做任何改动。它完美的实现了与<a href="http://jwc.hit.edu.cn">JWC</a>的交互，处理了大部分的错误和特殊情况，提供了一个很好的封装。这得益于范神@ronaflx，卢大神@luyi0619和雄哥@bearzx在前期给力的测试，感谢三位勇敢地成为脚本的第一批用户。</p>

<p>无论如何，这一个项目已经接近尾声了。下一步就要把精力集中到GRE和xfsd上去。开学已经一个月了这两项还没有多大进展，很惭愧。就这样吧。</p>

<p>本来想写一个文艺的结尾的，可是我真的不文艺。</p>

<p>PS：Facebook你敢不敢回个消息过来！要不要投过去简历就石沉大海啊！！！！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[周日大事记]]></title>
    <link href="http://www.ditsing.com/blog/2012/03/13/zhou-ri-da-shi-ji/"/>
    <updated>2012-03-13T20:36:00+11:00</updated>
    <id>http://www.ditsing.com/blog/2012/03/13/zhou-ri-da-shi-ji</id>
    <content type="html"><![CDATA[<p>本来第三篇文章想写有关PHP和Perl的，但是上周日下午12个小时之内发生的事儿让我很有写篇文章的冲动。有三件事要写，就按时间顺序来吧。</p>

<p>第一件是关于学习和未来的。周日下午，软件设计与实践课开题了，我们这个两人小组的题目是我选的。选了一个我很早很早之前的想法：把XFS移植到Windows下。题目很大，很激动人心，对我来说是个梦想式的题目。选这个题目我是有私心的，一方面希望自己能得到这方面(filesystem)的锻炼，另外一方面也希望能给我的简历能多个亮点。辛苦我的队友了。</p>

<p>第二件事是关于博客的。周日晚上10点，我的博客终于有域名了！您现在在浏览器地址栏里看到的就是了：<a href="http://ditsing.com">ditsing.com</a>。感谢卢大神的友情代付，感谢小莹莹的账户支持。</p>

<p>第三件事是关于比赛的。周日晚上十一点是<a href="http://www.codeforces.com/contest/61">CodeForces VK Cup</a>比赛的第一轮筛选。大家在基地里熬夜做比赛。Coding阶段的状况不可谓不壮烈，我最后15分钟还写完了一道题交了上去。判题的时候大家各种欢呼诅咒刷Board，闹到三点多最终结果出来了才安静下来，真是叉叉青年欢乐多啊。俺克服了千难万险终于成功晋级。基地里几家欢乐几家愁，祝愿没晋级的同学Wild Card顺利。</p>

<p>最后，欢迎大家跟我交换友情链接，<a href="http://luyi0619.org">@luyi0619</a>，<a href="http://icek.me">@icek</a>，<a href="http://www.cloudaice.com/">@cloudaice</a>，<a href="http://www.cloudfly.info">@cloudfly</a>，<a href="http://www.bearzx.com/">@bearzx</a>，说你们呢。也欢迎大家订阅我的博客，我会尽量给大家提供高质量的博文，而不是像今天这样的流水帐。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blog开张啦]]></title>
    <link href="http://www.ditsing.com/blog/2012/03/02/blogkai-zhang-la/"/>
    <updated>2012-03-02T19:56:00+11:00</updated>
    <id>http://www.ditsing.com/blog/2012/03/02/blogkai-zhang-la</id>
    <content type="html"><![CDATA[<p>今天我的Blog正式开张啦，欢迎大家常来参观！</p>

<p>Blog暂时放在Github上。请大家先不要收藏网址，因为我还没买域名^ _ ^。欢迎大家推荐主机～～</p>

<p>感谢<a href="http://www.cloudaice.com/">cloudaice</a>同学介绍给我Octopress。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[记一件naive的事儿]]></title>
    <link href="http://www.ditsing.com/blog/2012/03/02/ji-yi-jian-naivede-shi-er/"/>
    <updated>2012-03-02T19:24:00+11:00</updated>
    <id>http://www.ditsing.com/blog/2012/03/02/ji-yi-jian-naivede-shi-er</id>
    <content type="html"><![CDATA[<p>最近在写一个关于课程表的程序，跟中文正则表达式打了很多交道。<!-- more -->比如一次我需要把“周三”中的那个“三”转成数字。作为一个菜鸟Perler，我在一切可以用到正则表达式的地方放上一个正则表达式。在这儿，我非常naive的认为，中文的“三”也是一个数字，正则里的 &ldquo;\d&rdquo; 应该可以匹配，于是我这么写了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="nv">$week</span> <span class="o">=~</span> <span class="sr">s/周(\d*)/$1/</span><span class="p">;</span>
</span><span class='line'><span class="nv">$week</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">find_num</span><span class="p">(</span> <span class="nv">$week</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>神奇的是它居然达到了我的目的，最后我确实得到了数字3。 find_num 是个无辜的函数，它负责把“三”转成3。</p>

<p>于是naive的我naive的认为Perl是如此的强大，居然连中文的数字都能识别。
但是之后我用其他的代码做实验，无论是Perl 5.8, 5.10 还是5.12都匹配不上，于是我再次naive的认为只有最新的Perl 5.14才可以。直到今天我review了我的代码，用5.14测试了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="sr">s/周(\d)/$1/</span>
</span></code></pre></td></tr></table></div></figure>


<p>也匹配不上！我这才突然发现了其中的问题，相信我的读者们也都看出来了。</p>

<p>不过话说回来，Perl的正则还是很强大的，真的是得心应手。所以我决定，就把这个bug永久留在我的代码里了。</p>
]]></content>
  </entry>
  
</feed>
